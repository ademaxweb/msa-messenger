// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.1
// source: api/chat/v1/messages.proto

package chat

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Модель чата
type Chat struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Уникальный идентификатор чата
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Название чата (для групповых чатов)
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Описание чата (для групповых чатов)
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// URL аватара чата
	AvatarUrl     string `protobuf:"bytes,4,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Chat) Reset() {
	*x = Chat{}
	mi := &file_api_chat_v1_messages_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Chat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chat) ProtoMessage() {}

func (x *Chat) ProtoReflect() protoreflect.Message {
	mi := &file_api_chat_v1_messages_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chat.ProtoReflect.Descriptor instead.
func (*Chat) Descriptor() ([]byte, []int) {
	return file_api_chat_v1_messages_proto_rawDescGZIP(), []int{0}
}

func (x *Chat) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Chat) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Chat) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Chat) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

// Модель сообщения в чате
type Message struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Уникальный идентификатор сообщения
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Идентификатор чата, в котором отправлено сообщение
	ChatId uint32 `protobuf:"varint,2,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	// Идентификатор пользователя, отправившего сообщение
	UserId uint32 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Текст сообщения
	Text          string `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message) Reset() {
	*x = Message{}
	mi := &file_api_chat_v1_messages_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_api_chat_v1_messages_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_api_chat_v1_messages_proto_rawDescGZIP(), []int{1}
}

func (x *Message) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Message) GetChatId() uint32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *Message) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Message) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// Параметры пагинации для управления выводом списков
type Pagination struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Максимальное количество элементов на странице
	Limit uint32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// Текущая позиция курсора для пагинации (опционально)
	Cursor *uint32 `protobuf:"varint,2,opt,name=cursor,proto3,oneof" json:"cursor,omitempty"`
	// Позиция курсора для следующей страницы результатов (опционально)
	NextCursor    *uint32 `protobuf:"varint,3,opt,name=next_cursor,json=nextCursor,proto3,oneof" json:"next_cursor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	mi := &file_api_chat_v1_messages_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_api_chat_v1_messages_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_api_chat_v1_messages_proto_rawDescGZIP(), []int{2}
}

func (x *Pagination) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *Pagination) GetCursor() uint32 {
	if x != nil && x.Cursor != nil {
		return *x.Cursor
	}
	return 0
}

func (x *Pagination) GetNextCursor() uint32 {
	if x != nil && x.NextCursor != nil {
		return *x.NextCursor
	}
	return 0
}

// Запрос на создание личного чата между двумя пользователями
type CreateDirectChatRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Идентификатор пользователя, с которым создается личный чат
	ParticipantId uint32 `protobuf:"varint,1,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDirectChatRequest) Reset() {
	*x = CreateDirectChatRequest{}
	mi := &file_api_chat_v1_messages_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDirectChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDirectChatRequest) ProtoMessage() {}

func (x *CreateDirectChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_chat_v1_messages_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDirectChatRequest.ProtoReflect.Descriptor instead.
func (*CreateDirectChatRequest) Descriptor() ([]byte, []int) {
	return file_api_chat_v1_messages_proto_rawDescGZIP(), []int{3}
}

func (x *CreateDirectChatRequest) GetParticipantId() uint32 {
	if x != nil {
		return x.ParticipantId
	}
	return 0
}

// Ответ на запрос создания личного чата
type CreateDirectChatResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Идентификатор созданного чата
	ChatId        uint32 `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDirectChatResponse) Reset() {
	*x = CreateDirectChatResponse{}
	mi := &file_api_chat_v1_messages_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDirectChatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDirectChatResponse) ProtoMessage() {}

func (x *CreateDirectChatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_chat_v1_messages_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDirectChatResponse.ProtoReflect.Descriptor instead.
func (*CreateDirectChatResponse) Descriptor() ([]byte, []int) {
	return file_api_chat_v1_messages_proto_rawDescGZIP(), []int{4}
}

func (x *CreateDirectChatResponse) GetChatId() uint32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

// Запрос на получение информации о чате
type GetChatRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Идентификатор запрашиваемого чата
	ChatId        uint32 `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetChatRequest) Reset() {
	*x = GetChatRequest{}
	mi := &file_api_chat_v1_messages_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatRequest) ProtoMessage() {}

func (x *GetChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_chat_v1_messages_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatRequest.ProtoReflect.Descriptor instead.
func (*GetChatRequest) Descriptor() ([]byte, []int) {
	return file_api_chat_v1_messages_proto_rawDescGZIP(), []int{5}
}

func (x *GetChatRequest) GetChatId() uint32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

// Ответ с информацией о чате
type GetChatResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Объект чата с полной информацией
	Chat          *Chat `protobuf:"bytes,1,opt,name=chat,proto3" json:"chat,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetChatResponse) Reset() {
	*x = GetChatResponse{}
	mi := &file_api_chat_v1_messages_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatResponse) ProtoMessage() {}

func (x *GetChatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_chat_v1_messages_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatResponse.ProtoReflect.Descriptor instead.
func (*GetChatResponse) Descriptor() ([]byte, []int) {
	return file_api_chat_v1_messages_proto_rawDescGZIP(), []int{6}
}

func (x *GetChatResponse) GetChat() *Chat {
	if x != nil {
		return x.Chat
	}
	return nil
}

// Запрос на получение списка чатов пользователя
type ListUserChatsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Идентификатор пользователя, чьи чаты запрашиваются
	UserId uint32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Параметры пагинации для управления списком чатов
	Pagination    *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListUserChatsRequest) Reset() {
	*x = ListUserChatsRequest{}
	mi := &file_api_chat_v1_messages_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListUserChatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserChatsRequest) ProtoMessage() {}

func (x *ListUserChatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_chat_v1_messages_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserChatsRequest.ProtoReflect.Descriptor instead.
func (*ListUserChatsRequest) Descriptor() ([]byte, []int) {
	return file_api_chat_v1_messages_proto_rawDescGZIP(), []int{7}
}

func (x *ListUserChatsRequest) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ListUserChatsRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// Ответ со списком чатов пользователя
type ListUserChatsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Список чатов, в которых участвует пользователь
	Chats []*Chat `protobuf:"bytes,1,rep,name=chats,proto3" json:"chats,omitempty"`
	// Информация о пагинации для навигации по результатам
	Pagination    *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListUserChatsResponse) Reset() {
	*x = ListUserChatsResponse{}
	mi := &file_api_chat_v1_messages_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListUserChatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserChatsResponse) ProtoMessage() {}

func (x *ListUserChatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_chat_v1_messages_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserChatsResponse.ProtoReflect.Descriptor instead.
func (*ListUserChatsResponse) Descriptor() ([]byte, []int) {
	return file_api_chat_v1_messages_proto_rawDescGZIP(), []int{8}
}

func (x *ListUserChatsResponse) GetChats() []*Chat {
	if x != nil {
		return x.Chats
	}
	return nil
}

func (x *ListUserChatsResponse) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// Запрос на получение списка участников чата
type ListChatMembersRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Идентификатор чата, участники которого запрашиваются
	ChatId uint32 `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	// Параметры пагинации для управления списком участников
	Pagination    *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListChatMembersRequest) Reset() {
	*x = ListChatMembersRequest{}
	mi := &file_api_chat_v1_messages_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListChatMembersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChatMembersRequest) ProtoMessage() {}

func (x *ListChatMembersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_chat_v1_messages_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChatMembersRequest.ProtoReflect.Descriptor instead.
func (*ListChatMembersRequest) Descriptor() ([]byte, []int) {
	return file_api_chat_v1_messages_proto_rawDescGZIP(), []int{9}
}

func (x *ListChatMembersRequest) GetChatId() uint32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *ListChatMembersRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// Ответ со списком участников чата
type ListChatMembersResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Список идентификаторов пользователей-участников чата
	UserIds []uint32 `protobuf:"varint,1,rep,packed,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	// Информация о пагинации для навигации по результатам
	Pagination    *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListChatMembersResponse) Reset() {
	*x = ListChatMembersResponse{}
	mi := &file_api_chat_v1_messages_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListChatMembersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChatMembersResponse) ProtoMessage() {}

func (x *ListChatMembersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_chat_v1_messages_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChatMembersResponse.ProtoReflect.Descriptor instead.
func (*ListChatMembersResponse) Descriptor() ([]byte, []int) {
	return file_api_chat_v1_messages_proto_rawDescGZIP(), []int{10}
}

func (x *ListChatMembersResponse) GetUserIds() []uint32 {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *ListChatMembersResponse) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// Запрос на отправку сообщения в чат
type SendMessageRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Идентификатор чата, в который отправляется сообщение
	ChatId uint32 `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	// Текст отправляемого сообщения
	Text          string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendMessageRequest) Reset() {
	*x = SendMessageRequest{}
	mi := &file_api_chat_v1_messages_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageRequest) ProtoMessage() {}

func (x *SendMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_chat_v1_messages_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageRequest.ProtoReflect.Descriptor instead.
func (*SendMessageRequest) Descriptor() ([]byte, []int) {
	return file_api_chat_v1_messages_proto_rawDescGZIP(), []int{11}
}

func (x *SendMessageRequest) GetChatId() uint32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *SendMessageRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// Ответ на отправку сообщения
type SendMessageResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Объект отправленного сообщения с присвоенным идентификатором
	Message       *Message `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendMessageResponse) Reset() {
	*x = SendMessageResponse{}
	mi := &file_api_chat_v1_messages_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageResponse) ProtoMessage() {}

func (x *SendMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_chat_v1_messages_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageResponse.ProtoReflect.Descriptor instead.
func (*SendMessageResponse) Descriptor() ([]byte, []int) {
	return file_api_chat_v1_messages_proto_rawDescGZIP(), []int{12}
}

func (x *SendMessageResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

// Запрос на получение истории сообщений чата
type ListMessagesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Идентификатор чата, сообщения которого запрашиваются
	ChatId uint32 `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	// Параметры пагинации для управления историей сообщений
	Pagination    *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMessagesRequest) Reset() {
	*x = ListMessagesRequest{}
	mi := &file_api_chat_v1_messages_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMessagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMessagesRequest) ProtoMessage() {}

func (x *ListMessagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_chat_v1_messages_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMessagesRequest.ProtoReflect.Descriptor instead.
func (*ListMessagesRequest) Descriptor() ([]byte, []int) {
	return file_api_chat_v1_messages_proto_rawDescGZIP(), []int{13}
}

func (x *ListMessagesRequest) GetChatId() uint32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *ListMessagesRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// Ответ с историей сообщений чата
type ListMessagesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Список сообщений из запрашиваемого чата
	Messages []*Message `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	// Информация о пагинации для навигации по истории
	Pagination    *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMessagesResponse) Reset() {
	*x = ListMessagesResponse{}
	mi := &file_api_chat_v1_messages_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMessagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMessagesResponse) ProtoMessage() {}

func (x *ListMessagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_chat_v1_messages_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMessagesResponse.ProtoReflect.Descriptor instead.
func (*ListMessagesResponse) Descriptor() ([]byte, []int) {
	return file_api_chat_v1_messages_proto_rawDescGZIP(), []int{14}
}

func (x *ListMessagesResponse) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *ListMessagesResponse) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// Запрос на потоковую передачу новых сообщений из чата
type StreamMessagesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Идентификатор чата, из которого запрашиваются сообщения
	ChatId uint32 `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	// Временная метка в миллисекундах для получения сообщений начиная с указанного времени (опционально)
	SinceUnixMs   *uint64 `protobuf:"varint,2,opt,name=since_unix_ms,json=sinceUnixMs,proto3,oneof" json:"since_unix_ms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamMessagesRequest) Reset() {
	*x = StreamMessagesRequest{}
	mi := &file_api_chat_v1_messages_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamMessagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamMessagesRequest) ProtoMessage() {}

func (x *StreamMessagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_chat_v1_messages_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamMessagesRequest.ProtoReflect.Descriptor instead.
func (*StreamMessagesRequest) Descriptor() ([]byte, []int) {
	return file_api_chat_v1_messages_proto_rawDescGZIP(), []int{15}
}

func (x *StreamMessagesRequest) GetChatId() uint32 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *StreamMessagesRequest) GetSinceUnixMs() uint64 {
	if x != nil && x.SinceUnixMs != nil {
		return *x.SinceUnixMs
	}
	return 0
}

// Ответ в потоковой передаче сообщений
type StreamMessagesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Новое сообщение, полученное в чате
	Message       *Message `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamMessagesResponse) Reset() {
	*x = StreamMessagesResponse{}
	mi := &file_api_chat_v1_messages_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamMessagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamMessagesResponse) ProtoMessage() {}

func (x *StreamMessagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_chat_v1_messages_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamMessagesResponse.ProtoReflect.Descriptor instead.
func (*StreamMessagesResponse) Descriptor() ([]byte, []int) {
	return file_api_chat_v1_messages_proto_rawDescGZIP(), []int{16}
}

func (x *StreamMessagesResponse) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

var File_api_chat_v1_messages_proto protoreflect.FileDescriptor

const file_api_chat_v1_messages_proto_rawDesc = "" +
	"\n" +
	"\x1aapi/chat/v1/messages.proto\x12.github.com.ademaxweb.msa_messenger.chat.api.v1\x1a\x1bbuf/validate/validate.proto\"k\n" +
	"\x04Chat\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x1d\n" +
	"\n" +
	"avatar_url\x18\x04 \x01(\tR\tavatarUrl\"_\n" +
	"\aMessage\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\x12\x17\n" +
	"\achat_id\x18\x02 \x01(\rR\x06chatId\x12\x17\n" +
	"\auser_id\x18\x03 \x01(\rR\x06userId\x12\x12\n" +
	"\x04text\x18\x04 \x01(\tR\x04text\"\x80\x01\n" +
	"\n" +
	"Pagination\x12\x14\n" +
	"\x05limit\x18\x01 \x01(\rR\x05limit\x12\x1b\n" +
	"\x06cursor\x18\x02 \x01(\rH\x00R\x06cursor\x88\x01\x01\x12$\n" +
	"\vnext_cursor\x18\x03 \x01(\rH\x01R\n" +
	"nextCursor\x88\x01\x01B\t\n" +
	"\a_cursorB\x0e\n" +
	"\f_next_cursor\"H\n" +
	"\x17CreateDirectChatRequest\x12-\n" +
	"\x0eparticipant_id\x18\x01 \x01(\rB\x06\xbaH\x03\xc8\x01\x01R\rparticipantId\"3\n" +
	"\x18CreateDirectChatResponse\x12\x17\n" +
	"\achat_id\x18\x01 \x01(\rR\x06chatId\"1\n" +
	"\x0eGetChatRequest\x12\x1f\n" +
	"\achat_id\x18\x01 \x01(\rB\x06\xbaH\x03\xc8\x01\x01R\x06chatId\"[\n" +
	"\x0fGetChatResponse\x12H\n" +
	"\x04chat\x18\x01 \x01(\v24.github.com.ademaxweb.msa_messenger.chat.api.v1.ChatR\x04chat\"\x93\x01\n" +
	"\x14ListUserChatsRequest\x12\x1f\n" +
	"\auser_id\x18\x01 \x01(\rB\x06\xbaH\x03\xc8\x01\x01R\x06userId\x12Z\n" +
	"\n" +
	"pagination\x18\x02 \x01(\v2:.github.com.ademaxweb.msa_messenger.chat.api.v1.PaginationR\n" +
	"pagination\"\xbf\x01\n" +
	"\x15ListUserChatsResponse\x12J\n" +
	"\x05chats\x18\x01 \x03(\v24.github.com.ademaxweb.msa_messenger.chat.api.v1.ChatR\x05chats\x12Z\n" +
	"\n" +
	"pagination\x18\x02 \x01(\v2:.github.com.ademaxweb.msa_messenger.chat.api.v1.PaginationR\n" +
	"pagination\"\x95\x01\n" +
	"\x16ListChatMembersRequest\x12\x1f\n" +
	"\achat_id\x18\x01 \x01(\rB\x06\xbaH\x03\xc8\x01\x01R\x06chatId\x12Z\n" +
	"\n" +
	"pagination\x18\x02 \x01(\v2:.github.com.ademaxweb.msa_messenger.chat.api.v1.PaginationR\n" +
	"pagination\"\x90\x01\n" +
	"\x17ListChatMembersResponse\x12\x19\n" +
	"\buser_ids\x18\x01 \x03(\rR\auserIds\x12Z\n" +
	"\n" +
	"pagination\x18\x02 \x01(\v2:.github.com.ademaxweb.msa_messenger.chat.api.v1.PaginationR\n" +
	"pagination\"U\n" +
	"\x12SendMessageRequest\x12\x1f\n" +
	"\achat_id\x18\x01 \x01(\rB\x06\xbaH\x03\xc8\x01\x01R\x06chatId\x12\x1e\n" +
	"\x04text\x18\x02 \x01(\tB\n" +
	"\xbaH\a\xc8\x01\x01r\x02\x10\x01R\x04text\"h\n" +
	"\x13SendMessageResponse\x12Q\n" +
	"\amessage\x18\x01 \x01(\v27.github.com.ademaxweb.msa_messenger.chat.api.v1.MessageR\amessage\"\x92\x01\n" +
	"\x13ListMessagesRequest\x12\x1f\n" +
	"\achat_id\x18\x01 \x01(\rB\x06\xbaH\x03\xc8\x01\x01R\x06chatId\x12Z\n" +
	"\n" +
	"pagination\x18\x02 \x01(\v2:.github.com.ademaxweb.msa_messenger.chat.api.v1.PaginationR\n" +
	"pagination\"\xc7\x01\n" +
	"\x14ListMessagesResponse\x12S\n" +
	"\bmessages\x18\x01 \x03(\v27.github.com.ademaxweb.msa_messenger.chat.api.v1.MessageR\bmessages\x12Z\n" +
	"\n" +
	"pagination\x18\x02 \x01(\v2:.github.com.ademaxweb.msa_messenger.chat.api.v1.PaginationR\n" +
	"pagination\"s\n" +
	"\x15StreamMessagesRequest\x12\x1f\n" +
	"\achat_id\x18\x01 \x01(\rB\x06\xbaH\x03\xc8\x01\x01R\x06chatId\x12'\n" +
	"\rsince_unix_ms\x18\x02 \x01(\x04H\x00R\vsinceUnixMs\x88\x01\x01B\x10\n" +
	"\x0e_since_unix_ms\"k\n" +
	"\x16StreamMessagesResponse\x12Q\n" +
	"\amessage\x18\x01 \x01(\v27.github.com.ademaxweb.msa_messenger.chat.api.v1.MessageR\amessageB\x13Z\x11pkg/api/chat;chatb\x06proto3"

var (
	file_api_chat_v1_messages_proto_rawDescOnce sync.Once
	file_api_chat_v1_messages_proto_rawDescData []byte
)

func file_api_chat_v1_messages_proto_rawDescGZIP() []byte {
	file_api_chat_v1_messages_proto_rawDescOnce.Do(func() {
		file_api_chat_v1_messages_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_chat_v1_messages_proto_rawDesc), len(file_api_chat_v1_messages_proto_rawDesc)))
	})
	return file_api_chat_v1_messages_proto_rawDescData
}

var file_api_chat_v1_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_api_chat_v1_messages_proto_goTypes = []any{
	(*Chat)(nil),                     // 0: github.com.ademaxweb.msa_messenger.chat.api.v1.Chat
	(*Message)(nil),                  // 1: github.com.ademaxweb.msa_messenger.chat.api.v1.Message
	(*Pagination)(nil),               // 2: github.com.ademaxweb.msa_messenger.chat.api.v1.Pagination
	(*CreateDirectChatRequest)(nil),  // 3: github.com.ademaxweb.msa_messenger.chat.api.v1.CreateDirectChatRequest
	(*CreateDirectChatResponse)(nil), // 4: github.com.ademaxweb.msa_messenger.chat.api.v1.CreateDirectChatResponse
	(*GetChatRequest)(nil),           // 5: github.com.ademaxweb.msa_messenger.chat.api.v1.GetChatRequest
	(*GetChatResponse)(nil),          // 6: github.com.ademaxweb.msa_messenger.chat.api.v1.GetChatResponse
	(*ListUserChatsRequest)(nil),     // 7: github.com.ademaxweb.msa_messenger.chat.api.v1.ListUserChatsRequest
	(*ListUserChatsResponse)(nil),    // 8: github.com.ademaxweb.msa_messenger.chat.api.v1.ListUserChatsResponse
	(*ListChatMembersRequest)(nil),   // 9: github.com.ademaxweb.msa_messenger.chat.api.v1.ListChatMembersRequest
	(*ListChatMembersResponse)(nil),  // 10: github.com.ademaxweb.msa_messenger.chat.api.v1.ListChatMembersResponse
	(*SendMessageRequest)(nil),       // 11: github.com.ademaxweb.msa_messenger.chat.api.v1.SendMessageRequest
	(*SendMessageResponse)(nil),      // 12: github.com.ademaxweb.msa_messenger.chat.api.v1.SendMessageResponse
	(*ListMessagesRequest)(nil),      // 13: github.com.ademaxweb.msa_messenger.chat.api.v1.ListMessagesRequest
	(*ListMessagesResponse)(nil),     // 14: github.com.ademaxweb.msa_messenger.chat.api.v1.ListMessagesResponse
	(*StreamMessagesRequest)(nil),    // 15: github.com.ademaxweb.msa_messenger.chat.api.v1.StreamMessagesRequest
	(*StreamMessagesResponse)(nil),   // 16: github.com.ademaxweb.msa_messenger.chat.api.v1.StreamMessagesResponse
}
var file_api_chat_v1_messages_proto_depIdxs = []int32{
	0,  // 0: github.com.ademaxweb.msa_messenger.chat.api.v1.GetChatResponse.chat:type_name -> github.com.ademaxweb.msa_messenger.chat.api.v1.Chat
	2,  // 1: github.com.ademaxweb.msa_messenger.chat.api.v1.ListUserChatsRequest.pagination:type_name -> github.com.ademaxweb.msa_messenger.chat.api.v1.Pagination
	0,  // 2: github.com.ademaxweb.msa_messenger.chat.api.v1.ListUserChatsResponse.chats:type_name -> github.com.ademaxweb.msa_messenger.chat.api.v1.Chat
	2,  // 3: github.com.ademaxweb.msa_messenger.chat.api.v1.ListUserChatsResponse.pagination:type_name -> github.com.ademaxweb.msa_messenger.chat.api.v1.Pagination
	2,  // 4: github.com.ademaxweb.msa_messenger.chat.api.v1.ListChatMembersRequest.pagination:type_name -> github.com.ademaxweb.msa_messenger.chat.api.v1.Pagination
	2,  // 5: github.com.ademaxweb.msa_messenger.chat.api.v1.ListChatMembersResponse.pagination:type_name -> github.com.ademaxweb.msa_messenger.chat.api.v1.Pagination
	1,  // 6: github.com.ademaxweb.msa_messenger.chat.api.v1.SendMessageResponse.message:type_name -> github.com.ademaxweb.msa_messenger.chat.api.v1.Message
	2,  // 7: github.com.ademaxweb.msa_messenger.chat.api.v1.ListMessagesRequest.pagination:type_name -> github.com.ademaxweb.msa_messenger.chat.api.v1.Pagination
	1,  // 8: github.com.ademaxweb.msa_messenger.chat.api.v1.ListMessagesResponse.messages:type_name -> github.com.ademaxweb.msa_messenger.chat.api.v1.Message
	2,  // 9: github.com.ademaxweb.msa_messenger.chat.api.v1.ListMessagesResponse.pagination:type_name -> github.com.ademaxweb.msa_messenger.chat.api.v1.Pagination
	1,  // 10: github.com.ademaxweb.msa_messenger.chat.api.v1.StreamMessagesResponse.message:type_name -> github.com.ademaxweb.msa_messenger.chat.api.v1.Message
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_api_chat_v1_messages_proto_init() }
func file_api_chat_v1_messages_proto_init() {
	if File_api_chat_v1_messages_proto != nil {
		return
	}
	file_api_chat_v1_messages_proto_msgTypes[2].OneofWrappers = []any{}
	file_api_chat_v1_messages_proto_msgTypes[15].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_chat_v1_messages_proto_rawDesc), len(file_api_chat_v1_messages_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_chat_v1_messages_proto_goTypes,
		DependencyIndexes: file_api_chat_v1_messages_proto_depIdxs,
		MessageInfos:      file_api_chat_v1_messages_proto_msgTypes,
	}.Build()
	File_api_chat_v1_messages_proto = out.File
	file_api_chat_v1_messages_proto_goTypes = nil
	file_api_chat_v1_messages_proto_depIdxs = nil
}
